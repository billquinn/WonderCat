experiences = dataframe['experience']
colnames(experiences) = 'label'
experiences$category = 'experience'
users = dataframe["author"]
colnames(users) = "label"
users$category = "author"
# Combine all nodes and remove whitespace entries.
nodes = rbind(sources, technologies, experiences, users) %>% filter(grepl('\\w+', label))
# Create node size variable
nodes = nodes %>% group_by(label, category) %>% summarize(size = n())
# Remove duplicate nodes.
nodes = nodes[!duplicated(nodes),] %>% data.frame()
# Create column ID usind nodes index as value.
nodes$id = rownames(nodes)
# Replace "labels" in links to nodes "id" value.
links$from = nodes$id[ match( unlist(links$from), nodes$label)]
links$to = nodes$id[ match( unlist(links$to), nodes$label)]
# Remove variables.
rm(title_tech, tech_exp, sources, experiences, technologies, users)
# Set Styling.
# We'll start by adding new node and edge attributes to our dataframes.
vis.nodes <- nodes
vis.links <- links
vis.nodes$shape  <- "dot"
vis.nodes$shadow <- TRUE # Nodes will drop shadow
vis.nodes$title  <- vis.nodes$label # Text on click
vis.nodes$label <- vis.nodes$label # Node label
vis.nodes$size   <- vis.nodes$size * 10 # Node size
vis.nodes$borderWidth <- 2 # Node border width
# c("slategrey", "tomato", "gold")
colorMap = c(tecnique = "slategrey", experience = "tomato", source = "gold", author = "#B8726C")
vis.nodes$color.background <- colorMap[vis.nodes$category]
vis.nodes$color.border <- "black"
vis.nodes$color.highlight.background <- "orange"
vis.nodes$color.highlight.border <- "darkred"
vis.links$width <- links$weight # line width
vis.links$color <- "gray"    # line color
vis.links$arrows <- "to" # arrows: 'from', 'to', or 'middle'
vis.links$smooth <- TRUE    # should the edges be curved?
vis.links$shadow <- FALSE    # edge shadow
visnet <- visNetwork(vis.nodes, vis.links)
visOptions(
visnet,
highlightNearest = TRUE,
selectedBy = "label"
)
# Create links from columns: source -> technology -> experience.
title_tech = dataframe %>% select(title, technology)
colnames(title_tech) = c('from', 'to')
tech_exp = dataframe %>% select(technology, experience)
colnames(tech_exp) = c('from', 'to')
exp_user = dataframe %>% select(experience, author)
colnames(exp_user) = c("from", "to")
# Bind links dataframe and remove any rows with NA.
links = rbind(title_tech, tech_exp, exp_user)  %>%
filter(grepl('\\w+', from)) %>%
filter(grepl('\\w+', to))
# Create co-occurrence for link weights.
links = links %>% group_by(from, to) %>% summarize(weight = n())
# Create nodes from links and rename column name.
sources = dataframe['title']
colnames(sources) = 'label'
sources$category = 'source'
technologies = dataframe['technology']
colnames(technologies) = 'label'
technologies$category = 'technology'
experiences = dataframe['experience']
colnames(experiences) = 'label'
experiences$category = 'experience'
users = dataframe["author"]
colnames(users) = "label"
users$category = "author"
# Combine all nodes and remove whitespace entries.
nodes = rbind(sources, technologies, experiences, users) %>% filter(grepl('\\w+', label))
# Create node size variable
nodes = nodes %>% group_by(label, category) %>% summarize(size = n())
# Remove duplicate nodes.
nodes = nodes[!duplicated(nodes),] %>% data.frame()
# Create column ID usind nodes index as value.
nodes$id = rownames(nodes)
# Replace "labels" in links to nodes "id" value.
links$from = nodes$id[ match( unlist(links$from), nodes$label)]
links$to = nodes$id[ match( unlist(links$to), nodes$label)]
# Remove variables.
rm(title_tech, tech_exp, sources, experiences, technologies, users)
# Set Styling.
# We'll start by adding new node and edge attributes to our dataframes.
vis.nodes <- nodes
vis.links <- links
vis.nodes$shape  <- "dot"
vis.nodes$shadow <- TRUE # Nodes will drop shadow
vis.nodes$title  <- vis.nodes$label # Text on click
vis.nodes$label <- vis.nodes$label # Node label
vis.nodes$size   <- vis.nodes$size * 10 # Node size
vis.nodes$borderWidth <- 2 # Node border width
# c("slategrey", "tomato", "gold")
colorMap = c(tecnique = "slategrey", experience = "tomato", source = "gold", author = "#DC6B5A")
vis.nodes$color.background <- colorMap[vis.nodes$category]
vis.nodes$color.border <- "black"
vis.nodes$color.highlight.background <- "orange"
vis.nodes$color.highlight.border <- "darkred"
vis.links$width <- links$weight # line width
vis.links$color <- "gray"    # line color
vis.links$arrows <- "to" # arrows: 'from', 'to', or 'middle'
vis.links$smooth <- TRUE    # should the edges be curved?
vis.links$shadow <- FALSE    # edge shadow
visnet <- visNetwork(vis.nodes, vis.links)
visOptions(
visnet,
highlightNearest = TRUE,
selectedBy = "label"
)
# Create links from columns: source -> technology -> experience.
title_tech = dataframe %>% select(title, technology)
colnames(title_tech) = c('from', 'to')
tech_exp = dataframe %>% select(technology, experience)
colnames(tech_exp) = c('from', 'to')
exp_user = dataframe %>% select(experience, author)
colnames(exp_user) = c("from", "to")
# Bind links dataframe and remove any rows with NA.
links = rbind(title_tech, tech_exp, exp_user)  %>%
filter(grepl('\\w+', from)) %>%
filter(grepl('\\w+', to))
# Create co-occurrence for link weights.
links = links %>% group_by(from, to) %>% summarize(weight = n())
# Create nodes from links and rename column name.
sources = dataframe['title']
colnames(sources) = 'label'
sources$category = 'source'
technologies = dataframe['technology']
colnames(technologies) = 'label'
technologies$category = 'technology'
experiences = dataframe['experience']
colnames(experiences) = 'label'
experiences$category = 'experience'
users = dataframe["author"]
colnames(users) = "label"
users$category = "author"
# Combine all nodes and remove whitespace entries.
nodes = rbind(sources, technologies, experiences, users) %>% filter(grepl('\\w+', label))
# Create node size variable
nodes = nodes %>% group_by(label, category) %>% summarize(size = n())
# Remove duplicate nodes.
nodes = nodes[!duplicated(nodes),] %>% data.frame()
# Create column ID usind nodes index as value.
nodes$id = rownames(nodes)
# Replace "labels" in links to nodes "id" value.
links$from = nodes$id[ match( unlist(links$from), nodes$label)]
links$to = nodes$id[ match( unlist(links$to), nodes$label)]
# Remove variables.
rm(title_tech, tech_exp, sources, experiences, technologies, users)
# Set Styling.
# We'll start by adding new node and edge attributes to our dataframes.
vis.nodes <- nodes
vis.links <- links
vis.nodes$shape  <- "dot"
vis.nodes$shadow <- TRUE # Nodes will drop shadow
vis.nodes$title  <- vis.nodes$label # Text on click
vis.nodes$label <- vis.nodes$label # Node label
vis.nodes$size   <- vis.nodes$size * 10 # Node size
vis.nodes$borderWidth <- 2 # Node border width
# c("slategrey", "tomato", "gold")
colorMap = c(tecnique = "slategrey", experience = "tomato", source = "gold", author = "#94797E")
vis.nodes$color.background <- colorMap[vis.nodes$category]
vis.nodes$color.border <- "black"
vis.nodes$color.highlight.background <- "orange"
vis.nodes$color.highlight.border <- "darkred"
vis.links$width <- links$weight # line width
vis.links$color <- "gray"    # line color
vis.links$arrows <- "to" # arrows: 'from', 'to', or 'middle'
vis.links$smooth <- TRUE    # should the edges be curved?
vis.links$shadow <- FALSE    # edge shadow
visnet <- visNetwork(vis.nodes, vis.links)
visOptions(
visnet,
highlightNearest = TRUE,
selectedBy = "label"
)
#API_prefix <- "https://env-1120817.us.reclaim.cloud/wp-json/wp/v2/user-experience"
API_prefix <- "https://env-1120817.us.reclaim.cloud/wp-json/wp/v2/user-experience?page=1&per_page=100"
req <- request(API_prefix)
#resp <- req |> req_perform() |> resp_body_json(check_type = TRUE, simplifyVector = TRUE)
is_complete <- function(resp) {
length(resp_body_json(resp)$data) == 0
}
resps <- req_perform_iterative(
req,
next_req = iterate_with_offset("page", resp_complete = is_complete),
max_reqs = Inf
) |>
resp_body_json(check_type = TRUE, simplifyVector = TRUE)
#API_prefix <- "https://env-1120817.us.reclaim.cloud/wp-json/wp/v2/user-experience"
API_prefix <- "https://env-1120817.us.reclaim.cloud/wp-json/wp/v2/user-experience?page=1&per_page=100"
req <- request(API_prefix)
#resp <- req |> req_perform() |> resp_body_json(check_type = TRUE, simplifyVector = TRUE)
is_complete <- function(resp) {
length(resp_body_json(resp)$data) == 0
}
resps <- req_perform_iterative(
req,
next_req = iterate_with_offset("page", resp_complete = is_complete),
max_reqs = Inf
)
#|>
#  resp_body_json(check_type = TRUE, simplifyVector = TRUE)
View(resps)
#API_prefix <- "https://env-1120817.us.reclaim.cloud/wp-json/wp/v2/user-experience"
API_prefix <- "https://env-1120817.us.reclaim.cloud/wp-json/wp/v2/user-experience?page=1&per_page=100"
req <- request(API_prefix)
#resp <- req |> req_perform() |> resp_body_json(check_type = TRUE, simplifyVector = TRUE)
is_complete <- function(resp) {
length(resp_body_json(resp)$data) == 0
}
resps <- req_perform_iterative(
req,
next_req = iterate_with_offset("page", resp_complete = is_complete),
max_reqs = Inf
) |>
resp_content_type()
#API_prefix <- "https://env-1120817.us.reclaim.cloud/wp-json/wp/v2/user-experience"
API_prefix <- "https://env-1120817.us.reclaim.cloud/wp-json/wp/v2/user-experience?page=1&per_page=100"
req <- request(API_prefix)
#resp <- req |> req_perform() |> resp_body_json(check_type = TRUE, simplifyVector = TRUE)
is_complete <- function(resp) {
length(resp_body_json(resp)$data) == 0
}
resps <- req_perform_iterative(
req,
next_req = iterate_with_offset("page", resp_complete = is_complete),
max_reqs = Inf
) |>
resp_body_json(check_type = TRUE, simplifyVector = TRUE)
resps |> resp_has_body()
View(resps)
resps$[[1]]$cache
resps$1
resps[[1]]
resps[[1]] %>% resp_body_json()
data <- resps[[1]] %>% resp_body_json()
View(data)
data <- resps[[1]] %>% resp_body_json(check_type = TRUE, simplifyVector = TRUE)
View(data)
dataframe <- clean_up_dataframe(data)
View(dataframe)
for (x in resps) {print x}
for (x in resps) {print (x)}
data <- matrix()
for (i in resps){
data[i,] <- i %>% resp_body_json(check_type = TRUE, simplifyVector = TRUE)
}
i
test <- resps[[1]] %>% resp_body_json(check_type = TRUE, simplifyVector = TRUE)
View(test)
data <- as.data.frame()
data <- NULL
for (i in resps){
bind_rows(data, resp[[i]] %>% resp_body_json(check_type = TRUE, simplifyVector = TRUE))
}
bind_rows(data, i %>% resp_body_json(check_type = TRUE, simplifyVector = TRUE))
for (i in resps){
bind_rows(data, i %>% resp_body_json(check_type = TRUE, simplifyVector = TRUE))
}
data <- NULL
for (i in resps){
bind_rows(data, i %>% resp_body_json(check_type = TRUE, simplifyVector = TRUE))
}
#API_prefix <- "https://env-1120817.us.reclaim.cloud/wp-json/wp/v2/user-experience"
API_prefix <- "https://env-1120817.us.reclaim.cloud/wp-json/wp/v2/user-experience?page=1&per_page=10"
req <- request(API_prefix)
is_complete <- function(resp) {
length(resp_body_json(resp)$data) == 0
}
resps <- req_perform_iterative(
req,
next_req = iterate_with_offset("page", resp_complete = is_complete),
max_reqs = Inf
)
View(resps)
resps <- req_perform_iterative(
req,
next_req = iterate_with_offset("page=", resp_complete = is_complete),
max_reqs = Inf
)
View(resps)
resps <- req_perform_iterative(
req,
next_req = iterate_with_offset("?page=", resp_complete = is_complete),
max_reqs = Inf
)
View(resps)
resps <- req_perform_iterative(
req,
next_req = iterate_with_offset("page_index", resp_complete = is_complete),
max_reqs = Inf
)
View(resps)
length(resp_body_json(resps)$data) == 0
length(resp_body_json(resps[[1]])$data) == 0
resps <- req_perform_iterative(
req |> req_url_query(limit = 1),
next_req = iterate_with_offset(
"page_index",
resp_pages = function(resp) resp_body_json(resp)$pages
),
max_reqs = Inf
)
resps <- req_perform_iterative(
req,
next_req = iterate_with_offset(
"page_index",
resp_pages = function(resp) resp_body_json(resp)$pages
),
max_reqs = Inf
)
resps <- req_perform_iterative(
req,
start = 1, offset = 1, resp_pages = NULL, resp_complete = NULL
#next_req = iterate_with_offset("page_index", resp_complete = is_complete),
#max_reqs = Inf
)
resps <- req_perform_iterative(
req,
next_req = iterate_with_offset(start = 1, offset = 1, resp_pages = NULL, resp_complete = NULL)
#next_req = iterate_with_offset("page_index", resp_complete = is_complete),
#max_reqs = Inf
)
resps <- req_perform_iterative(
req,
next_req = iterate_with_offset(req, start = 1, offset = 1, resp_pages = NULL, resp_complete = NULL)
#next_req = iterate_with_offset("page_index", resp_complete = is_complete),
#max_reqs = Inf
)
resps <- req_perform_iterative(
req,
next_req = iterate_with_offset("page", start = 1, offset = 1, resp_pages = NULL, resp_complete = NULL)
#next_req = iterate_with_offset("page_index", resp_complete = is_complete),
#max_reqs = Inf
)
View(resps)
resp <- req |> req_perform() |> resp_body_json(check_type = TRUE, simplifyVector = TRUE)
dataframe <- clean_up_dataframe(res)
dataframe <- clean_up_dataframe(resp)
View(dataframe)
resps <- req_perform_iterative(
req,
next_req = iterate_with_offset("page_index", resp_complete = is_complete),
max_reqs = Inf
)
dataframe <- clean_up_dataframe(resps)
View(resps)
View(resps)
#API_prefix <- "https://env-1120817.us.reclaim.cloud/wp-json/wp/v2/user-experience"
API_prefix <- "https://env-1120817.us.reclaim.cloud/wp-json/wp/v2/user-experience?page=1&per_page=100"
is_complete <- function(resp) {
length(resp_body_json(resp)$data) == 0
}
resps <- req_perform_iterative(
req,
next_req = iterate_with_offset("page_index", resp_complete = is_complete),
max_reqs = Inf
)
View(resps)
#API_prefix <- "https://env-1120817.us.reclaim.cloud/wp-json/wp/v2/user-experience"
API_prefix <- "https://env-1120817.us.reclaim.cloud/wp-json/wp/v2/user-experience?page=1&per_page=100"
req <- request(API_prefix)
is_complete <- function(resp) {
length(resp_body_json(resp)$data) == 0
}
resps <- req_perform_iterative(
req,
next_req = iterate_with_offset("page_index", resp_complete = is_complete),
max_reqs = Inf
)
View(resps)
resps <- req_perform_iterative(
req |> req_url_query(limit = 1),
next_req = iterate_with_offset(
"page_index", resp_pages = function(resp) resp_body_json(resp)$pages
),
max_reqs = Inf
)
resps <- req_perform_iterative(
req |> req_url_query(limit = 100),
next_req = iterate_with_offset(
"page_index", resp_pages = function(resp) resp_body_json(resp)$pages
),
max_reqs = Inf
)
resps <- req_perform_iterative(
req,
next_req = iterate_with_offset(
"page_index", resp_pages = function(resp) resp_body_json(resp)$pages
),
max_reqs = Inf
)
library(httr)
URL <- "https://env-1120817.us.reclaim.cloud/wp-json/wp/v2/user-experience?page=1&per_page=100"
resp <- GET(URL)
View(resp)
data <- fromJSON(rawToChar(resp$content))
View(data)
# Clean Up Dataframe
clean_up_dataframe <- function(data){
dataframe <- data %>%
select(id, author, date, benefit, experience, technology, acf) %>%
unnest(c(benefit, experience, technology, acf), names_sep = '.') %>%
select(
id, author, date,
benefit.name, experience.name, technology.name,
acf.title_of_creative_work, starts_with('acf.wikidata-qid')
)
colnames(dataframe) <- c(
'id', 'author', 'date', 'benefit', 'experience', 'technology', 'title', 'QID'
)
return (dataframe)
}
dataframe <- clean_up_dataframe(data)
View(data)
View(dataframe)
# Import data.
nodes <- read_delim("nodes.tsv", delim = "\t")
links <- read_delim("links", delim = "\t")
library(tidyverse)
library(shiny)
library(httr)
library(httr2)
library(jsonlite)
library(dplyr)
library(bslib)
library(DT)
library(ggplot2)
library(ggraph)
library(igraph)
library(plotly)
library(treemap)
library(treemapify)
library(visNetwork)
print (getwd())
# Import functions.
source(paste0(getwd(), 'Documents/DH/GitHub/WonderCat/WonderCat', '/functions.R'))
library(tidyverse)
library(shiny)
library(httr)
library(httr2)
library(jsonlite)
library(dplyr)
library(bslib)
library(DT)
library(ggplot2)
library(ggraph)
library(igraph)
library(plotly)
library(treemap)
library(treemapify)
library(visNetwork)
print (getwd())
# Import functions.
source(paste0(getwd(), '/functions.R'))
# Import data.
nodes <- read_delim(paste0(getwd(), "nodes.tsv", delim = "\t"))
# Import data.
nodes <- read_delim(paste0(getwd(), "/nodes.tsv", delim = "\t"))
# Import data.
nodes <- read_delim(paste0(getwd(), "/nodes.tsv", delim = "\t"))
# Import data.
nodes <- read_delim(paste0(getwd(), "/nodes.tsv"))
View(nodes)
links <- read_delim(paste0(getwd(), "/links.tsv"))
# Import data.
nodes <- read_delim(paste0(getwd(), "/nodes.tsv"))
links <- read_delim(paste0(getwd(), "/links.tsv"))
# Set Styling.
# We'll start by adding new node and edge attributes to our dataframes.
vis.nodes <- nodes
vis.links <- links
vis.nodes$shape  <- "dot"
vis.nodes$shadow <- TRUE # Nodes will drop shadow
vis.nodes$title  <- vis.nodes$label # Text on click
vis.nodes$label <- vis.nodes$label # Node label
vis.nodes$size   <- vis.nodes$size * 10 # Node size
vis.nodes$borderWidth <- 2 # Node border width
# c("slategrey", "tomato", "gold")
colorMap = c(tecnique = "slategrey", experience = "tomato", source = "gold", author = "#94797E")
vis.nodes$color.background <- colorMap[vis.nodes$category]
vis.nodes$color.border <- "black"
vis.nodes$color.highlight.background <- "orange"
vis.nodes$color.highlight.border <- "darkred"
vis.links$width <- links$weight # line width
vis.links$color <- "gray"    # line color
vis.links$arrows <- "to" # arrows: 'from', 'to', or 'middle'
vis.links$smooth <- TRUE    # should the edges be curved?
vis.links$shadow <- FALSE    # edge shadow
visnet <- visNetwork(vis.nodes, vis.links)
visOptions(
visnet,
highlightNearest = TRUE,
selectedBy = "label"
)
getwd()
runApp('dev')
runApp('dev')
data <- read_delim(paste0(getwd(), '/../main/wonderCat_data.tsv'), delim = '\t')
runApp('dev')
print(getwd())
paste0(getwd(), '/main/wonderCat_data.tsv')
runApp('dev')
runApp('dev')
data <- read_delim(paste0(getwd(), '../main/wonderCat_data.tsv'), delim = '\t')
read_delim(paste0(getwd(), '/../main/wonderCat_data.tsv'), delim = '\t')
data <- read_delim(paste0(getwd(), '/../main/wonderCat_data.tsv'), delim = '\t')
getwd()
setwd("/Users/williamquinn/Documents/DH/GitHub/WonderCat/WonderCat/dev/")
