shiny::runApp()
runApp()
library(datasets)
mpgData <- mtcars
write_delim(mpgData, "mpgData.tsv", delim = "\t")
library(treemapify)
library(tidyverse)
library(shiny)
library(httr)
library(httr2)
library(jsonlite)
library(dplyr)
library(bslib)
library(DT)
library(ggplot2)
library(ggraph)
library(igraph)
library(plotly)
library(treemap)
library(treemapify)
library(visNetwork)
print (getwd())
# Import functions.
source(paste0(getwd(), '/functions.R'))
')
wikiData <- read_delim("wikidata.tsv", delim = '\t')
data <- read_delim("wonderCat_data.tsv", delim = '\t')
wikiData <- read_delim("wikidata.tsv", delim = '\t')
# Network Function for Building from Subset
create_network_data <- function(dataframe, columnOne, columnTwo){
# Create links from columns: source -> technology -> experience.
links = dataframe %>% select(columnOne, columnTwo)
colnames(links) = c('from', 'to')
# Bind links dataframe and remove any rows with NA.
links = links %>%
filter(grepl('\\w+', from)) %>%
filter(grepl('\\w+', to))
# Create co-occurrence for link weights.
links = links %>% group_by(from, to) %>% summarize(weight = n())
# Create nodes from links and rename column name.
nodeOne = dataframe[columnOne]
colnames(titles) = 'label'
nodeOne$category = columnOne
nodeTwo = dataframe[columnTwo]
colnames(titles) = 'label'
nodeTwo$category = columnTwo
# Combine all nodes and remove whitespace entries.
nodes = rbind(nodeOne, nodeTwo) %>% filter(grepl('\\w+', label))
# Create node size variable
nodes = nodes %>% group_by(label, category) %>% summarize(size = n())
# Remove duplicate nodes.
nodes = nodes[!duplicated(nodes),] %>% data.frame()
# Create column ID usind nodes index as value.
nodes$id = rownames(nodes)
# Replace "labels" in links to nodes "id" value.
links$from = nodes$id[ match( unlist(links$from), nodes$label)]
links$to = nodes$id[ match( unlist(links$to), nodes$label)]
# Set Styling.
# We'll start by adding new node and edge attributes to our dataframes.
vis.nodes <- nodes
vis.links <- links
vis.nodes$shape  <- "dot"
vis.nodes$shadow <- TRUE # Nodes will drop shadow
vis.nodes$title  <- vis.nodes$label # Text on click
vis.nodes$label <- vis.nodes$label # Node label
vis.nodes$size   <- 40 #vis.nodes$size # Node size
vis.nodes$borderWidth <- 2 # Node border width
# c("slategrey", "tomato", "gold")
colorMap = c(technology = "slategrey", experience = "tomato", title = "gold", author = "#94797E")
vis.nodes$color.background <- colorMap[vis.nodes$category]
vis.nodes$color.border <- "black"
vis.nodes$color.highlight.background <- "orange"
vis.nodes$color.highlight.border <- "darkred"
#vis.links$width <- links$weight # line width
vis.links$color <- "gray"    # line color
vis.links$arrows <- "to" # arrows: 'from', 'to', or 'middle'
vis.links$smooth <- TRUE    # should the edges be curved?
vis.links$shadow <- FALSE    # edge shadow
return(list(nodes = vis.nodes, links = vis.links))
}
create_network_data(data, columnOne, columnTwo)
# Network Function for Building from Subset
create_network_data <- function(dataframe, columnOne, columnTwo){
# Create links from columns: source -> technology -> experience.
links = dataframe %>% select(columnOne, columnTwo)
colnames(links) = c('from', 'to')
# Bind links dataframe and remove any rows with NA.
links = links %>%
filter(grepl('\\w+', from)) %>%
filter(grepl('\\w+', to))
# Create co-occurrence for link weights.
links = links %>% group_by(from, to) %>% summarize(weight = n())
# Create nodes from links and rename column name.
nodeOne = dataframe[columnOne]
colnames(titles) = 'label'
nodeOne$category = columnOne
nodeTwo = dataframe[columnTwo]
colnames(titles) = 'label'
nodeTwo$category = columnTwo
# Combine all nodes and remove whitespace entries.
nodes = rbind(nodeOne, nodeTwo) %>% filter(grepl('\\w+', label))
# Create node size variable
nodes = nodes %>% group_by(label, category) %>% summarize(size = n())
# Remove duplicate nodes.
nodes = nodes[!duplicated(nodes),] %>% data.frame()
# Create column ID usind nodes index as value.
nodes$id = rownames(nodes)
# Replace "labels" in links to nodes "id" value.
links$from = nodes$id[ match( unlist(links$from), nodes$label)]
links$to = nodes$id[ match( unlist(links$to), nodes$label)]
# Set Styling.
# We'll start by adding new node and edge attributes to our dataframes.
vis.nodes <- nodes
vis.links <- links
vis.nodes$shape  <- "dot"
vis.nodes$shadow <- TRUE # Nodes will drop shadow
vis.nodes$title  <- vis.nodes$label # Text on click
vis.nodes$label <- vis.nodes$label # Node label
vis.nodes$size   <- 40 #vis.nodes$size # Node size
vis.nodes$borderWidth <- 2 # Node border width
# c("slategrey", "tomato", "gold")
colorMap = c(technology = "slategrey", experience = "tomato", title = "gold", author = "#94797E")
vis.nodes$color.background <- colorMap[vis.nodes$category]
vis.nodes$color.border <- "black"
vis.nodes$color.highlight.background <- "orange"
vis.nodes$color.highlight.border <- "darkred"
#vis.links$width <- links$weight # line width
vis.links$color <- "gray"    # line color
vis.links$arrows <- "to" # arrows: 'from', 'to', or 'middle'
vis.links$smooth <- TRUE    # should the edges be curved?
vis.links$shadow <- FALSE    # edge shadow
return(list(nodes = vis.nodes, links = vis.links))
}
columnOne <- "experience"
columnTwo <- "title"
create_network_data(data, columnOne, columnTwo)
# Network Function for Building from Subset
create_network_data <- function(dataframe, columnOne, columnTwo){
print (columnOne, columnTwo)
# Create links from columns: source -> technology -> experience.
links = dataframe %>% select(columnOne, columnTwo)
colnames(links) = c('from', 'to')
# Bind links dataframe and remove any rows with NA.
links = links %>%
filter(grepl('\\w+', from)) %>%
filter(grepl('\\w+', to))
# Create co-occurrence for link weights.
links = links %>% group_by(from, to) %>% summarize(weight = n())
# Create nodes from links and rename column name.
nodeOne = dataframe[columnOne]
colnames(titles) = 'label'
nodeOne$category = columnOne
nodeTwo = dataframe[columnTwo]
colnames(titles) = 'label'
nodeTwo$category = columnTwo
# Combine all nodes and remove whitespace entries.
nodes = rbind(nodeOne, nodeTwo) %>% filter(grepl('\\w+', label))
# Create node size variable
nodes = nodes %>% group_by(label, category) %>% summarize(size = n())
# Remove duplicate nodes.
nodes = nodes[!duplicated(nodes),] %>% data.frame()
# Create column ID usind nodes index as value.
nodes$id = rownames(nodes)
# Replace "labels" in links to nodes "id" value.
links$from = nodes$id[ match( unlist(links$from), nodes$label)]
links$to = nodes$id[ match( unlist(links$to), nodes$label)]
# Set Styling.
# We'll start by adding new node and edge attributes to our dataframes.
vis.nodes <- nodes
vis.links <- links
vis.nodes$shape  <- "dot"
vis.nodes$shadow <- TRUE # Nodes will drop shadow
vis.nodes$title  <- vis.nodes$label # Text on click
vis.nodes$label <- vis.nodes$label # Node label
vis.nodes$size   <- 40 #vis.nodes$size # Node size
vis.nodes$borderWidth <- 2 # Node border width
# c("slategrey", "tomato", "gold")
colorMap = c(technology = "slategrey", experience = "tomato", title = "gold", author = "#94797E")
vis.nodes$color.background <- colorMap[vis.nodes$category]
vis.nodes$color.border <- "black"
vis.nodes$color.highlight.background <- "orange"
vis.nodes$color.highlight.border <- "darkred"
#vis.links$width <- links$weight # line width
vis.links$color <- "gray"    # line color
vis.links$arrows <- "to" # arrows: 'from', 'to', or 'middle'
vis.links$smooth <- TRUE    # should the edges be curved?
vis.links$shadow <- FALSE    # edge shadow
return(list(nodes = vis.nodes, links = vis.links))
}
columnOne <- "experience"
columnTwo <- "title"
create_network_data(data, columnOne, columnTwo)
?print
print(columnOne)
print(columnOne, columnTwo)
# Network Function for Building from Subset
create_network_data <- function(dataframe, columnOne, columnTwo){
# Create links from columns: source -> technology -> experience.
links = dataframe %>% select(columnOne, columnTwo)
colnames(links) = c('from', 'to')
print (links)
# Bind links dataframe and remove any rows with NA.
links = links %>%
filter(grepl('\\w+', from)) %>%
filter(grepl('\\w+', to))
# Create co-occurrence for link weights.
links = links %>% group_by(from, to) %>% summarize(weight = n())
# Create nodes from links and rename column name.
nodeOne = dataframe[columnOne]
colnames(titles) = 'label'
nodeOne$category = columnOne
nodeTwo = dataframe[columnTwo]
colnames(titles) = 'label'
nodeTwo$category = columnTwo
# Combine all nodes and remove whitespace entries.
nodes = rbind(nodeOne, nodeTwo) %>% filter(grepl('\\w+', label))
# Create node size variable
nodes = nodes %>% group_by(label, category) %>% summarize(size = n())
# Remove duplicate nodes.
nodes = nodes[!duplicated(nodes),] %>% data.frame()
# Create column ID usind nodes index as value.
nodes$id = rownames(nodes)
# Replace "labels" in links to nodes "id" value.
links$from = nodes$id[ match( unlist(links$from), nodes$label)]
links$to = nodes$id[ match( unlist(links$to), nodes$label)]
# Set Styling.
# We'll start by adding new node and edge attributes to our dataframes.
vis.nodes <- nodes
vis.links <- links
vis.nodes$shape  <- "dot"
vis.nodes$shadow <- TRUE # Nodes will drop shadow
vis.nodes$title  <- vis.nodes$label # Text on click
vis.nodes$label <- vis.nodes$label # Node label
vis.nodes$size   <- 40 #vis.nodes$size # Node size
vis.nodes$borderWidth <- 2 # Node border width
# c("slategrey", "tomato", "gold")
colorMap = c(technology = "slategrey", experience = "tomato", title = "gold", author = "#94797E")
vis.nodes$color.background <- colorMap[vis.nodes$category]
vis.nodes$color.border <- "black"
vis.nodes$color.highlight.background <- "orange"
vis.nodes$color.highlight.border <- "darkred"
#vis.links$width <- links$weight # line width
vis.links$color <- "gray"    # line color
vis.links$arrows <- "to" # arrows: 'from', 'to', or 'middle'
vis.links$smooth <- TRUE    # should the edges be curved?
vis.links$shadow <- FALSE    # edge shadow
return(list(nodes = vis.nodes, links = vis.links))
}
columnOne <- "experience"
columnTwo <- "title"
create_network_data(data, columnOne, columnTwo)
# Network Function for Building from Subset
create_network_data <- function(dataframe, columnOne, columnTwo){
# Create links from columns: source -> technology -> experience.
links = dataframe %>% select(columnOne, columnTwo)
colnames(links) = c('from', 'to')
# Bind links dataframe and remove any rows with NA.
links = links %>%
filter(grepl('\\w+', from)) %>%
filter(grepl('\\w+', to))
# Create co-occurrence for link weights.
links = links %>% group_by(from, to) %>% summarize(weight = n())
# Create nodes from links and rename column name.
nodeOne = dataframe[columnOne]
colnames(nodeOne) = 'label'
nodeOne$category = columnOne
nodeTwo = dataframe[columnTwo]
colnames(nodeTwo) = 'label'
nodeTwo$category = columnTwo
# Combine all nodes and remove whitespace entries.
nodes = rbind(nodeOne, nodeTwo) %>% filter(grepl('\\w+', label))
# Create node size variable
nodes = nodes %>% group_by(label, category) %>% summarize(size = n())
# Remove duplicate nodes.
nodes = nodes[!duplicated(nodes),] %>% data.frame()
# Create column ID usind nodes index as value.
nodes$id = rownames(nodes)
# Replace "labels" in links to nodes "id" value.
links$from = nodes$id[ match( unlist(links$from), nodes$label)]
links$to = nodes$id[ match( unlist(links$to), nodes$label)]
# Set Styling.
# We'll start by adding new node and edge attributes to our dataframes.
vis.nodes <- nodes
vis.links <- links
vis.nodes$shape  <- "dot"
vis.nodes$shadow <- TRUE # Nodes will drop shadow
vis.nodes$title  <- vis.nodes$label # Text on click
vis.nodes$label <- vis.nodes$label # Node label
vis.nodes$size   <- 40 #vis.nodes$size # Node size
vis.nodes$borderWidth <- 2 # Node border width
# c("slategrey", "tomato", "gold")
colorMap = c(technology = "slategrey", experience = "tomato", title = "gold", author = "#94797E")
vis.nodes$color.background <- colorMap[vis.nodes$category]
vis.nodes$color.border <- "black"
vis.nodes$color.highlight.background <- "orange"
vis.nodes$color.highlight.border <- "darkred"
#vis.links$width <- links$weight # line width
vis.links$color <- "gray"    # line color
vis.links$arrows <- "to" # arrows: 'from', 'to', or 'middle'
vis.links$smooth <- TRUE    # should the edges be curved?
vis.links$shadow <- FALSE    # edge shadow
return(list(nodes = vis.nodes, links = vis.links))
}
columnOne <- "experience"
columnTwo <- "title"
create_network_data(data, columnOne, columnTwo)
create_network_data(data, columnOne, columnTwo)
bar_data <- dataframe %>% count(technology)
library(tidyverse)
library(shiny)
library(httr)
library(httr2)
library(jsonlite)
library(dplyr)
library(bslib)
library(DT)
library(ggplot2)
library(ggraph)
library(igraph)
library(plotly)
library(treemap)
library(treemapify)
library(visNetwork)
print (getwd())
# Import functions.
source(paste0(getwd(), '/functions.R'))
data <- read_delim("wonderCat_data.tsv", delim = '\t')
wikiData <- read_delim("wikidata.tsv", delim = '\t')
bar_data <- data %>% count(technology)
p <- bar_data |>
ggplot(aes(x = n, y = technology, fill = technology)) +
geom_bar(stat = "identity")
ggplotly(p)
View(bar_data)
bar_quantile <- quantile(bar_data %>% pull(all_of(n)), value)
bar_quantile <- quantile(bar_data %>% pull(all_of(n)), n)
bar_quantile <- quantile(bar_data %>% pull(all_of(column)), n)
iris
iris <- iris
quantile_value <- quantile(iris %>% pull(all_of(column)), value)
View(iris)
quantile_value <- quantile(iris %>% pull(all_of(Sepal.Length)), value)
filter_iris <- function(column, value){
quantile_value <- quantile(iris %>% pull(all_of(column)), value)
iris %>% filter(.data[[column]] < quantile_value)
}
filter_iris("Petal.Length", input$quantile)
# input$quantile =
filter_iris("Petal.Length", 0.75)
# input$quantile =
less_iris <- filter_iris("Petal.Length", 0.75)
# input$quantile =
less_iris <- filter_iris("Petal.Length", 0.25)
filter_iris <- function(column, min_value, max_value){
min_quantile_value <- quantile(iris %>% pull(all_of(column)), min_value)
max_quantile_value <- quantile(iris %>% pull(all_of(column)), max_value)
#iris %>% filter(.data[[column]] < quantile_value)
iris %>% filter(.data[[column]] %in% (min_quantile_value:max_quantile_value))
}
# input$quantile =
less_iris <- filter_iris("Petal.Length", 0.25, 0.75)
View(less_iris)
#iris %>% filter(.data[[column]] < quantile_value)
iris %>% filter(.data[[column]] %in% (min_quantile_value:max_quantile_value))
min_quantile_value <- quantile(dataframe %>% pull(all_of(column)), min_value)
quantile_filter <- function(dataframe, column, min_value, max_value){
min_quantile_value <- quantile(dataframe %>% pull(all_of(column)), min_value)
max_quantile_value <- quantile(dataframe %>% pull(all_of(column)), max_value)
#iris %>% filter(.data[[column]] < quantile_value)
dataframe %>% filter(.data[[column]] %in% (min_quantile_value:max_quantile_value))
}
# input$quantile =
less_iris <- quantile_filter(iris, "Petal.Length", 0.25, 0.75)
# input$quantile =
less_iris <- quantile_filter(bar_data, "n", 0.25, 0.75)
View(less_iris)
# input$quantile =
less_iris <- quantile_filter(bar_data, "n", 0.5, 1)
View(less_iris)
