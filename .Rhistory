library(tidyverse)
library(shiny)
library(httr2)
library(jsonlite)
library(dplyr)
library(bslib)
library(DT)
library(ggplot2)
library(ggraph)
library(igraph)
library(plotly)
print (getwd())
# Import functions.
source(paste0(getwd(), 'Documents/DH/GitHub/WonderCat/WonderCat', '/functions.R'))
WP_USER <- 'bill.quinn@marist.edu'
WP_KEY <- 'f45D rE4U BoIR w6xq Yle7 ktEE'
API_prefix <- "https://env-1120817.us.reclaim.cloud/wp-json/wp/v2/user-experience"
req <- request(API_prefix)
resp <- req |> req_perform() |> resp_body_json(check_type = TRUE, simplifyVector = TRUE)
# Clean Up Dataframe
clean_up_dataframe <- function(data){
dataframe <- data %>%
select(id, author, date, benefit, experience, technology, acf) %>%
unnest(c(benefit, experience, technology, acf), names_sep = '.') %>%
select(
id, author, date,
benefit.name, experience.name, technology.name,
acf.title_of_creative_work, starts_with('acf.wikidata-qid')
)
colnames(dataframe) <- c(
'id', 'author', 'date', 'benefit', 'experience', 'technology', 'title', 'QID'
)
return (dataframe)
}
dataframe <- clean_up_dataframe(resp)
bar_data <- dataframe %>% count(benefit)
p <- bar_data |>
ggplot(aes(x = n, y = benefit, fill = benefit)) +
geom_bar(stat = "identity")
ggplotly(p)
bar_data <- dataframe %>% count(technology)
p <- bar_data |>
ggplot(aes(x = n, y = technology, fill = technology)) +
geom_bar(stat = "identity")
ggplotly(p)
length(unique(dataframe[, benefit]))
length(unique(dataframe[, benefits]))
dataframe %>% count(technology)
View(dataframe)
runApp('~/Documents/DH/GitHub/WonderCat/R/Old Materials')
dataframe %>% count(technology)
dataframe %>% count(count = technology)
treeData <-  dataframe %>% group_by(title, experience) %>% summarize(count = n())
View(treeData)
plot_ly(data = treeData, type = "treemap", values = ~count, parents = ~title)
treeData <-  dataframe %>% group_by(title, experience) %>% summarize(count = n())
t <- plot_ly(data = treeData, type = "treemap", values = ~count, parents = ~title)
ggplotly(t)
treeData <-  dataframe %>% group_by(title, experience) %>% summarize(count = n())
t <- plot_ly(data = treeData, type = "treemap", values = count, parents = title)
ggplotly(t)
library(treemap)
install.packages(treemap)
install.packages("treemap")
treemap(treeData, index = c("title", "experience"), vSize="count", type="index")
library(treemap)
treemap(treeData, index = c("title", "experience"), vSize="count", type="index")
t <- plot_ly(data = treeData, type = "treemap", values = count, parents = title)
ggplotly(t)
t <- plot_ly(type = "treemap", values = treeData$experience, parents = treeData$title)
ggplotly(t)
t <- plot_ly(data = treeData, branchvalues = "total", type = "treemap",
parents = ~title, labels = ~experience, values = ~count)
ggplotly(t)
View(t)
library(treemapify)
install.packages("treemapify")
library(treemapify)
G20
G20 <- G20
View(G20)
p <- ggplot(G20, aes(area = gdp_mil_usd, fill = hdi)) +
geom_treemap()
ggplotly(p)
p <- ggplot(G20, aes(area = ~gdp_mil_usd, fill = ~hdi)) +
geom_treemap()
ggplotly(p)
p <- ggplot(G20, aes(area = gdp_mil_usd, fill = hdi)) +
geom_treemap()
View(p)
p
p <- ggplot(G20, aes(area = gdp_mil_usd, fill = hdi)) +
geom_treemap() +
geom_treemap_text(fontface = "italic", colour = "white", place = "centre",
grow = TRUE)
p
#ggplotly(t)
plot_ly(data = G20, branchvalues = "total", type = "treemap",
parents = ~region, labels = ~country, values = ~gdp_mil_usd)
t
#ggplotly(t)
t <- plot_ly(data = G20, branchvalues = "total", type = "treemap",
parents = ~region, labels = ~country, values = ~gdp_mil_usd)
t
#ggplotly(t)
t <- plot_ly(data = G20, branchvalues = "total", type = "treemap",
parents = region, labels = country, values = gdp_mil_usd)
#ggplotly(t)
t <- plot_ly(data = G20, branchvalues = "total", type = "treemap",
parents = ~region, labels = ~country, values = ~gdp_mil_usd)
t
View(t)
p <- ggplot(treeData, aes(area = count, fill = experience, label = title)) +
geom_treemap()
p
p <- ggplot(treeData, aes(area = count, fill = experience, label = title)) +
geom_treemap() +
geom_treemap_text()
p
#p
ggplotly(p)
p <- ggplot(treeData, aes(area = count, fill = experience, label = title)) +
geom_treemap() +
geom_treemap_text(place = "center")
p
library(treemap)
library(HistData)
install.packages("HistData")
library(HistData)
cholera <- data("Cholera")
cholera
data("Cholera")
str(Cholera)
View(Cholera)
treemap(Cholera,
index=c("region","district"),
vSize="cholera_deaths",
vColor = "region",
type = "categorical",
# formatting options:
palette = brewer.pal(n = 5, name = "Accent"),
align.labels=list(
c("left", "top"),
c("right", "bottom")
),
border.col = "white",
bg.labels = 255,
position.legend = "none")
library(treemap)
library(HistData)
data("Cholera")
treemap(Cholera,
index=c("region","district"),
vSize="cholera_deaths",
vColor = "region",
type = "categorical",
# formatting options:
#palette = brewer.pal(n = 5, name = "Accent"),
align.labels=list(
c("left", "top"),
c("right", "bottom")
),
border.col = "white",
bg.labels = 255,
position.legend = "none")
treemap(treeData,
index=c("experience","title"),
vSize="count",
vColor = "experience",
type = "categorical",
# formatting options:
#palette = brewer.pal(n = 5, name = "Accent"),
align.labels=list(
c("left", "top"),
c("right", "bottom")
),
border.col = "white",
bg.labels = 255,
position.legend = "none")
t <- treemap(Cholera,
index=c("region","district"),
vSize="cholera_deaths",
vColor = "region",
type = "categorical",
# formatting options:
#palette = brewer.pal(n = 5, name = "Accent"),
align.labels=list(
c("left", "top"),
c("right", "bottom")
),
border.col = "white",
bg.labels = 255,
position.legend = "none")
ggplotly(t)
View(t)
t
ggplot(t)
View(t)
# dataset
group <- c(rep("group-1",4),rep("group-2",2),rep("group-3",3))
subgroup <- paste("subgroup" , c(1,2,3,4,1,2,1,2,3), sep="-")
value <- c(13,5,22,12,11,7,3,1,23)
data <- data.frame(group,subgroup,value)
View(data)
p <- treemap(data,
index=c("group","subgroup"),
vSize="value",
type="index",
palette = "Set2",
bg.labels=c("white"),
align.labels=list(
c("center", "center"),
c("right", "bottom")
)
)
install.packages("d3treeR")
library(d3treeR)
